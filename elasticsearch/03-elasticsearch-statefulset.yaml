apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch
  namespace: logging
spec:
  serviceName: elasticsearch
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      serviceAccountName: elasticsearch # Usar el SA con permisos
      initContainers:
      - name: create-certs
        image: docker.elastic.co/elasticsearch/elasticsearch:8.5.0 # Esta imagen tiene openssl y curl
        command: ["/bin/bash", "-c"]
        args:
        - |
          #!/bin/bash
          set -ex

          CERT_DIR="/usr/share/elasticsearch/config/certs"
          mkdir -p "$CERT_DIR"
          rm -f "$CERT_DIR/elastic-stack-ca.p12" "$CERT_DIR/elastic-certificates.p12" "$CERT_DIR/ca.crt"

          echo "Generating self-signed certificates..."
          /usr/share/elasticsearch/bin/elasticsearch-certutil ca --silent --out "$CERT_DIR/elastic-stack-ca.p12" --pass ""

          INSTANCE_NAME="elasticsearch"
          NAMESPACE="logging"
          CLUSTER_DOMAIN="${CLUSTER_DOMAIN:-cluster.local}"
          POD_IP=$(hostname -i)

          /usr/share/elasticsearch/bin/elasticsearch-certutil cert --silent \
            --name "$INSTANCE_NAME" \
            --dns "$INSTANCE_NAME,$INSTANCE_NAME.$NAMESPACE,$INSTANCE_NAME.$NAMESPACE.svc,$INSTANCE_NAME.$NAMESPACE.svc.$CLUSTER_DOMAIN" \
            --ip "127.0.0.1,$POD_IP" \
            --ca "$CERT_DIR/elastic-stack-ca.p12" \
            --ca-pass "" --out "$CERT_DIR/elastic-certificates.p12" --pass ""

          openssl pkcs12 -in "$CERT_DIR/elastic-stack-ca.p12" -passin pass:"" -nokeys -clcerts -out "$CERT_DIR/ca.crt"
          echo "Self-signed certificates generated."

          CA_CERT_B64=$(cat "$CERT_DIR/ca.crt" | base64 -w0)
          K8S_TOKEN_PATH="/var/run/secrets/kubernetes.io/serviceaccount/token"
          K8S_API_CACERT_PATH="/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
          SECRET_NAME="elasticsearch-ca"
          K8S_API_URL="https://kubernetes.default.svc"

          SECRET_PAYLOAD="{
            \"apiVersion\": \"v1\",
            \"kind\": \"Secret\",
            \"metadata\": {
              \"name\": \"$SECRET_NAME\",
              \"namespace\": \"$NAMESPACE\"
            },
            \"data\": {
              \"ca.crt\": \"$CA_CERT_B64\"
            },
            \"type\": \"Opaque\"
          }"

          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            --cacert "$K8S_API_CACERT_PATH" \
            -H "Authorization: Bearer $(cat $K8S_TOKEN_PATH)" \
            "$K8S_API_URL/api/v1/namespaces/$NAMESPACE/secrets/$SECRET_NAME")

          if [ "$HTTP_CODE" == "200" ]; then
            echo "Secret $SECRET_NAME already exists, attempting to update (PUT)..."
            METHOD="PUT"
            URL_PATH="/api/v1/namespaces/$NAMESPACE/secrets/$SECRET_NAME"
          elif [ "$HTTP_CODE" == "404" ]; then
            echo "Secret $SECRET_NAME does not exist, attempting to create (POST)..."
            METHOD="POST"
            URL_PATH="/api/v1/namespaces/$NAMESPACE/secrets"
          else
            echo "Error checking for secret $SECRET_NAME, HTTP code: $HTTP_CODE. Aborting."
            exit 1
          fi

          curl --cacert "$K8S_API_CACERT_PATH" --fail -X "$METHOD" \
            -H "Authorization: Bearer $(cat $K8S_TOKEN_PATH)" \
            -H "Content-Type: application/json" \
            -d "$SECRET_PAYLOAD" \
            "$K8S_API_URL$URL_PATH"

          echo "CA certificate operation for secret $SECRET_NAME finished."
        volumeMounts:
        - name: certs-volume
          mountPath: /usr/share/elasticsearch/config/certs
      containers:
      - name: elasticsearch
        image: docker.elastic.co/elasticsearch/elasticsearch:8.5.0
        resources:
          requests:
            memory: "1Gi"
            cpu: "0.5"
          limits:
            memory: "2Gi"
            cpu: "1"
        ports:
        - containerPort: 9200
          name: http
        - containerPort: 9300
          name: transport
        volumeMounts:
        - name: elasticsearch-storage
          mountPath: /usr/share/elasticsearch/data
        - name: certs-volume
          mountPath: /usr/share/elasticsearch/config/certs
        env:
        - name: ELASTIC_PASSWORD
          value: "password" 
        - name: discovery.type
          value: single-node
        - name: xpack.security.enabled
          value: "true"
        - name: xpack.security.http.ssl.enabled
          value: "true"
        - name: xpack.security.http.ssl.keystore.path
          value: "/usr/share/elasticsearch/config/certs/elastic-certificates.p12"
        - name: xpack.security.http.ssl.truststore.path
          value: "/usr/share/elasticsearch/config/certs/elastic-certificates.p12"
        - name: xpack.security.transport.ssl.enabled
          value: "true" 
        - name: xpack.security.transport.ssl.verification_mode
          value: "certificate"
        - name: xpack.security.transport.ssl.keystore.path 
          value: "/usr/share/elasticsearch/config/certs/elastic-certificates.p12"
        - name: xpack.security.transport.ssl.truststore.path
          value: "/usr/share/elasticsearch/config/certs/elastic-certificates.p12"
        - name: ES_JAVA_OPTS
          value: "-Xms512m -Xmx512m"
      volumes:
      - name: certs-volume
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: elasticsearch-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: standard
      resources:
        requests:
          storage: 5Gi